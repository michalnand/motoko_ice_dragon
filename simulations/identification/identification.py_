import LibsControl
import numpy
import matplotlib.pyplot as plt




def load_from_file(file_name):
    v = numpy.loadtxt(file_name)



    u = numpy.expand_dims(v[:, 1], axis=1)
    #x = numpy.expand_dims(v[:, 2], axis=1)
    x = v[:, 2:]

    #TODO denoising
    #u = LibsControl.denoising(u, alpha = 0.001, steps = 100)

    return u, x
    

def servo_oscilations(model, u_turn_max, u_forward_max, theta_max, distance_max, steps):
    u_log           = []
    x_log           = []

    state_theta     = 0
    state_forward   = 0
    
    for n in range(steps):
        
        x = model.x

        
        theta    = x[1, 0]
        distance = x[3, 0]

        u = numpy.zeros((2, 1))

        if state_theta == 0:
            u_turn = u_turn_max
            if theta > theta_max:
                state_theta = 1
        else:
            u_turn = -u_turn_max
            if theta < -theta_max:
                state_theta = 0


        if state_forward == 0:
            u_forward = u_forward_max
            if distance > distance_max:
                state_forward = 1
        else:
            u_forward = -u_forward_max
            if distance < -distance_max:
                state_forward = 0


        u = numpy.zeros((2, 1))

        u[0, 0] = u_forward + u_turn
        u[1, 0] = u_forward - u_turn

        x, _ = model.forward(u)

        u_log.append(u[:, 0])
        x_log.append(x[:, 0])
    
    u_log   = numpy.array(u_log)
    x_log   = numpy.array(x_log)


    return u_log, x_log


if __name__ == "__main__":


    '''
    dt    = 1.0/250.0
    robot = DifferentialRobot(dt)

    steps = 10000

    
    u_turn_max = 1.3
    u_forward_max = 1.0
    theta_max = 1.1
    distance_max = 1.6

    u, x =  servo_oscilations(robot, u_turn_max, u_forward_max, theta_max, distance_max, steps)
    '''


    dt = 1.0/250.0

    n = 0
    
    u, x = load_from_file("data/turn_identification_" + str(n) + ".txt")
    
    models, loss = LibsControl.identification(u, x, dt, steps_count=20, augmentations = [])

    model = models[-1]

    ab      = model.T
    order   = x.shape[1]
    a_hat = ab[:, 0:order]
    b_hat = ab[:, order:]

    
    x_pred  = []
    x_hat   = numpy.expand_dims(x[0], axis=1)
    ds      = LibsControl.DynamicalSystem(a_hat, b_hat, dt = dt)

    for i in range(x.shape[0]):
        x_pred.append(x_hat)
        u_tmp    = numpy.expand_dims(u[i, :], axis=1)
        x_hat, _ = ds.forward(x_hat, u_tmp)    


    x_pred = numpy.array(x_pred)
    

    t_result = dt*numpy.arange(x.shape[0])


    print("model for data ", n)
    print(numpy.round(a_hat, 3))
    print(numpy.round(b_hat, 3))
    print("\n\n")

    poles = numpy.linalg.eigvals(a_hat) + 0j
    print("poles")
    print(poles)
    print("\n\n")


    fig, axs = plt.subplots(3, 1, figsize=(8, 6))


    axs[0].plot(t_result, u[:, 0], label="input u", color="purple")
    axs[0].set_xlabel("time [s]")
    axs[0].set_ylabel("motor control")
    axs[0].grid()

    axs[1].plot(t_result, x[:, 0],      label="measurement", color="red")
    axs[1].plot(t_result, x_pred[:, 0], label="model", color="deepskyblue")
    axs[1].set_xlabel("time [s]")
    axs[1].set_ylabel("angular velocity")
    axs[1].legend()
    axs[1].grid()   

    
    axs[2].plot(t_result, x[:, 1],      label="measurement", color="red")
    axs[2].plot(t_result, x_pred[:, 1], label="model", color="deepskyblue")
    axs[2].set_xlabel("time [s]")
    axs[2].set_ylabel("angle")
    axs[2].legend()
    axs[2].grid()
    

    
    plt.tight_layout()
    plt.show()
    #plt.savefig(file_name, dpi = 300)


