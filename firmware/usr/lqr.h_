#ifndef _LQR_H_
#define _LQR_H_

/*
k=
 [[ 0.93947  7.54465  7.5173  37.63855]
 [-0.93947 -7.54465  7.5173  37.63855]] 

ki=
 [[  0.       22.36068   0.       70.71068]
 [  0.      -22.36068   0.       70.71068]] 
*/

template <unsigned int plant_inputs, unsigned int plant_order>
class LQR
{   
    public:
        LQR()
        {

        }

        virtual ~LQR()
        {

        } 

        void init(float *k, float *ki, float antiwindup, float dt)
        {
            for (unsigned int j = 0; j < plant_inputs*plant_order; j++)
            {
                this->k[j] = k[j];
            }

            for (unsigned int j = 0; j < plant_inputs*plant_order; j++)
            {
                this->ki[j] = ki[j];
            }
           
            for (unsigned int j = 0; j < plant_order; j++)
            {
                error_sum[j] = 0.0;
            }

            for (unsigned int j = 0; j < plant_inputs; j++)
            {
                u[j] = 0.0;
            }

            for (unsigned int j = 0; j < plant_inputs; j++)
            {
                u_tmp[j] = 0.0;
            }

            this->antiwindup = antiwindup;
            this->dt         = dt;
        }



        void step()
        {
            //integral action error
            //error     = xr - x
            //error_sum = error_sum + error*dt
            for (unsigned int i = 0; i < plant_order; i++)
            {
                float e = xr[i] - x[i];

                error_sum[i] = error_sum[i] + e*dt;
            }
            
            for (unsigned int j = 0; j < plant_inputs; j++)
            {
                float u_sum = 0.0;
                for (unsigned int i = 0; i < plant_order; i++)
                {
                    u_sum+= - k[j*plant_order + i]*x[i];
                    u_sum+= -ki[j*plant_order + i]*error_sum[i];
                }
            }
          
            //outputs saturation
            for (unsigned int i = 0; i < plant_inputs; i++)
            {
                u[i] = u_tmp[i];
                if (u[i] > antiwindup)
                {
                    u[i] = antiwindup;
                }

                if (u[i] < -antiwindup)
                {
                    u[i] = -antiwindup;
                }
            }

            //antiwindup, back calculating
            //raising error_sum is no more effecting u,
            //since u is out of range 
            for (unsigned int j = 0; j < plant_inputs; j++)
            {
                float e = u[j] - u_tmp[j];

                for (unsigned int i = 0; i < plant_order; i++)
                    error_sum[i]+= e*dt;
            }

        }

      

    public:
        float k[plant_inputs*plant_order];
        float ki[plant_inputs*plant_order];

        float dt;
        float antiwindup;

    public:
        float error_sum[plant_order];

    public:
        //required state
        float xr[plant_order];

        //system state
        float x[plant_order];
        
        //controller output
        float u_tmp[plant_inputs];
        float u[plant_inputs];
};

#endif
